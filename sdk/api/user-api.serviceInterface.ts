/**
 * OpenAPI Petstore
 * This is a sample server Petstore server. For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { UserDto } from '../model/models';


import { Configuration }                                     from '../configuration';


export interface CreateUserRequestParams {
    userDto: UserDto;
}

export interface CreateUsersWithArrayInputRequestParams {
    userDto: Array<UserDto>;
}

export interface CreateUsersWithListInputRequestParams {
    userDto: Array<UserDto>;
}

export interface DeleteUserRequestParams {
    username: string;
}

export interface GetUserByNameRequestParams {
    username: string;
}

export interface LoginUserRequestParams {
    username: string;
    password: string;
}

export interface UpdateUserRequestParams {
    username: string;
    userDto: UserDto;
}


export interface UserApiServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Create user
     * This can only be done by the logged in user.
* @param requestParameters
     */
    createUser(requestParameters: CreateUserRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Creates list of users with given input array
     * 
* @param requestParameters
     */
    createUsersWithArrayInput(requestParameters: CreateUsersWithArrayInputRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Creates list of users with given input array
     * 
* @param requestParameters
     */
    createUsersWithListInput(requestParameters: CreateUsersWithListInputRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Delete user
     * This can only be done by the logged in user.
* @param requestParameters
     */
    deleteUser(requestParameters: DeleteUserRequestParams, extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Get user by user name
     * 
* @param requestParameters
     */
    getUserByName(requestParameters: GetUserByNameRequestParams, extraHttpRequestParams?: any): Observable<UserDto>;

    /**
     * Logs user into the system
     * 
* @param requestParameters
     */
    loginUser(requestParameters: LoginUserRequestParams, extraHttpRequestParams?: any): Observable<string>;

    /**
     * Logs out current logged in user session
     * 
*/
    logoutUser(extraHttpRequestParams?: any): Observable<{}>;

    /**
     * Updated user
     * This can only be done by the logged in user.
* @param requestParameters
     */
    updateUser(requestParameters: UpdateUserRequestParams, extraHttpRequestParams?: any): Observable<{}>;

}
